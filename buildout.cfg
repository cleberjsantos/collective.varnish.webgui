[buildout]
index = http://d.pypi.python.org/simple

parts =
    varnish-build
    varnish
    nginx-build
    nginx
    supervisor-build
    supervisord-conf
# webui parts
    app
    mkdirs
    deploy_ini
    deploy_cfg
    debug_ini
    debug_cfg
#    test

newest = false
versions = versions

find-links =
    http://dist.plone.org/thirdparty
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

extensions +=
    mr.developer
unzip = true

sources = sources
auto-checkout = 

        * 
eggs =
    Pillow
    collective.varnish.webgui
    Paste
    PasteScript
    PasteDeploy

zcml =

[versions]
Flask = 0.9
Flask-Bootstrap = 2.2.1-1
Flask-GoogleLogin = 0.0.3
Flask-Security = 1.5.1
Flask-SQLAlchemy = 0.16
Flask-XML-RPC = 0.1.2
Flask-Babel = 0.8
Flask-Environments = 0.1
Flask-Mail = 0.7.3
python-varnish = 0.2.1

distribute = 0.6.27
setuptools = 0.6c11
zc.buildout = 1.5
zope.interface = 4.0.1


[hosts]
nginx-main = 0.0.0.0
varnish-bind = 0.0.0.0 
varnish-telnet = 127.0.0.1
supervisor = 127.0.0.1
varnishui = 127.0.0.1

[ports]
nginx = 80
supervisor = 9001
varnish-bind = 8080
varnish-telnet = 9003
varnishui = 5000

[sources]
collective.varnish.webgui = git git@github.com:cleberjsantos/collective.varnish.webgui.git

[downloads]
varnish = http://repo.varnish-cache.org/source/varnish-3.0.3.tar.gz
nginx = http://nginx.org/download/nginx-1.2.3.tar.gz
libatomic_ops = http://www.hpl.hp.com/research/linux/atomic_ops/download/libatomic_ops-1.2.tar.gz

[varnish-build]
recipe = zc.recipe.cmmi
url = ${downloads:varnish}

[varnish]
recipe = plone.recipe.varnish
config = ${buildout:directory}/etc/varnish/varnish.vcl
cache-size = 200M
daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
bind = ${hosts:varnish-bind}:${ports:varnish-bind}
telnet = "${hosts:varnish-telnet}:${ports:varnish-telnet}"
cache-type = malloc
#storage = ${buildout:directory}/parts/varnish/storage,
storage = 

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
ignore-existing = true
configure-options =
    --with-http_gzip_static_module
    --with-http_stub_status_module
    --with-http_dav_module
    --with-http_ssl_module
    --with-http_flv_module
    --with-pcre
   --with-libatomic
    --with-poll_module
    --with-cc-opt="-march=i686"
    --http-client-body-temp-path=${buildout:directory}/var/tmp/client
    --http-proxy-temp-path=${buildout:directory}/var/tmp/proxy
    --http-fastcgi-temp-path=${buildout:directory}/var/tmp/fcgi
    --with-md5-asm --with-md5=/usr/include
    --with-sha1-asm
    --with-sha1=/usr/include
    --with-http_realip_module

[supervisor-build]
recipe = collective.recipe.supervisor
plugins =
       supervisor>=3.0a7
       superlance

[supervisord-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/supervisord.conf_tmpl
output = ${buildout:directory}/etc/supervisord.conf

[nginx]
recipe = gocept.nginx
nginx = nginx-build
configuration =
    user cleber;
    error_log ${buildout:directory}/var/log/main-error.log warn;

    #timer_resolution 100ms;

    # Used for debug Nginx:http://wiki.nginx.org/Debugging
    worker_rlimit_core 25M;
    worker_processes 4;

    # With this option you can bind the worker process to a CPU, it calls sched_setaffinity().
    # Your OS may schedule all workers on single CPU/core this can be avoided using worker_cpu_affinity.
    worker_cpu_affinity 0001 0010 0100 1000;

    google_perftools_profiles ${buildout:directory}/var/nginxga;

    daemon off;
    master_process  off;

    events {
        worker_connections 1024;
        # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ] ;
        use epoll;
    }

    http {

        charset  utf-8;

        client_max_body_size            30M;
        client_body_buffer_size         128k;
        large_client_header_buffers     4 32k;
        connection_pool_size            256;
        request_pool_size               4k;
        client_header_buffer_size       32k;

        # Seta buffer das conexoes proxy
        proxy_buffers 8 256k;
        proxy_buffer_size 256k;

        sendfile        on;
        tcp_nopush on;

        # Gzip
        gzip              on;
        gzip_buffers      16 8k;
        gzip_comp_level   9;
        gzip_http_version 1.0;
        gzip_proxied any;
        gzip_min_length   0;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp image/png image/gif image/jpg image/jpeg;
        gzip_vary         on;
        gzip_disable     "MSIE [1-6]\.(?!.*SV1)";

        # Error pages
        error_page 500 502 503 504  /500.html;

        # Document Root
        root  ${buildout:directory}/var/www/;

        # Prevenir erros amigaveis no IE
        msie_padding on;

        # Evitamos erros do Zope, Plone, Varnish (on|off)
        # Se (off) o Plone mostrara sua mensagem padrao de erro ao inves
        # de recebermos erros do Nginx
        #proxy_intercept_errors off;

        # Log
        log_format main '$remote_addr - $remote_user [$time_local]'
          '"$request" $status $bytes_sent '
          '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
          '"$gzip_ratio" "$http_host"';

        access_log ${buildout:directory}/var/log/access.log main;

        include ${buildout:directory}/parts/nginx-build/conf/mime.types;

        include ${buildout:directory}/etc/vhosts/*.conf;


        server {
            server_name _;
            listen ${ports:nginx};

            return 444;

            #Impedir que arquivos que como .htaccess de serem vistos em Nginx
            location ~ /\.ht {
                 deny  all;
            }


            location / {
                index index.html;
            }
       }

    }


[cmds]
recipe = plone.recipe.command
command =
     ln -s ${buildout:directory}/parts/varnish-build/sbin/* ${buildout:directory}/bin/
     ln -s ${buildout:directory}/parts/varnish-build/bin/*  ${buildout:directory}/bin/
     echo '#!/bin/sh
     exec ${buildout:directory}/bin/varnishd \
         -f "${varnish:config}" \
         -P "${buildout:directory}/parts/varnish/varnish.pid" \
         -a $HOSTNAME:${ports:varnish-bind} \
         -T ${varnish:telnet} \
         -t 120 \
         -p thread_pools=4 \
         -p thread_pool_min=200 \
         -p thread_pool_max=4000 \
         -p thread_pool_add_delay=2 \
         -p session_linger=120ms \
         -s ${varnish:cache-type},${varnish:storage}${varnish:cache-size} \
         "$@"' > ${buildout:directory}/bin/varnish
     chmod +x ${buildout:directory}/bin/varnish
update-command = ${cmds:command}


# WebUi varnish application
[app]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = python-console

[server]
host = ${hosts:varnishui}
port = ${ports:varnishui} 
logfiles = ${buildout:directory}/var/log

[mkdirs]
recipe = z3c.recipe.mkdir
paths =
    ${server:logfiles}

[deploy_ini]
recipe = collective.recipe.template
input = templates/deploy.ini.in
output = ${buildout:directory}/etc/${:outfile}
outfile = deploy.ini
app = collective.varnish.webgui 
workers = 10
spawn_if_under = 5
max_requests = 100

[debug_ini]
<= deploy_ini
outfile = debug.ini
app = collective.varnish.webgui#debug
workers = 1
spawn_if_under = 1
max_requests = 0

[deploy_cfg]
recipe = collective.recipe.template
input = inline:
    # Deployment configuration
    DEBUG = False
    SECRET_KEY = '1234567'
    USERNAME = 'cleber'
output = ${buildout:directory}/etc/deploy.cfg

[debug_cfg]
recipe = collective.recipe.template
input = inline:
    # Debugging configuration
    DEBUG = True
    SECRET_KEY = '1234567'
    USERNAME = 'cleber'
output = ${buildout:directory}/etc/debug.cfg

[test]
recipe = pbp.recipe.noserunner
eggs = collective.varnish.webgui
defaults = -v

